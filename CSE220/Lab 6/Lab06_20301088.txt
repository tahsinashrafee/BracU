# Task - 1
def rec_selection_sort(input, i=0, j=1):
    if i >= len(input) - 1:
        return
    low_inp = i
    while len(input) > j:
        if input[low_inp] > input[j]:
            low_inp = j
        j += 1
    if not low_inp == i:
        input[i], input[low_inp] = input[low_inp], input[i]
    rec_selection_sort(input, i + 1, i + 2)


my_input = [10, 5, 8, 1, 9]
rec_selection_sort(my_input)
print(my_input)


# Task - 2
def rec_insertion(input, i=1):
    if i >= len(input):
        return
    j = i - 1
    h_l = input[i]
    while j >= 0:
        if input[j] <= h_l:
            break
        else:
            input[j + 1] = input[j]
            input[j] = h_l
            j -= 1
    rec_insertion(input, i + 1)


my_input = [10, 5, 8, 1, 9]
rec_insertion(my_input)
print(my_input)


# Task - 3 & 4
class Node:
    def __init__(self, val, nxt=None):
        self.value = val
        self.next = nxt


class Linked_List:
    def __init__(self, a):
        self.head = None
        self.tail = None
        for i in a:
            node = Node(i, None)
            if self.head is None:
                self.head = node
                self.tail = node
            else:
                self.tail.next = node
                self.tail = node

    def print_list_cmd(self):
        n = self.head
        while n is not None:
            print(n.value, end=' ')
            n = n.next
        print()

    def size(self):
        count = 0
        n = self.head
        while n is not None:
            count += 1
            n = n.next
        return count

    def nodeAt(self, idx):
        my_c = 0
        n = self.head
        while n is not None:
            if my_c != idx:
                n = n.next
                my_c += 1
                continue
            return n

    # Task - 3
    def rec_bubble(self, yes=False):
        if yes:
            return
        yes = True
        for i in range(self.size() - 1):
            if self.nodeAt(i).value > self.nodeAt(i + 1).value:
                yes = False
                self.nodeAt(i + 1).value, self.nodeAt(i).value = self.nodeAt(i).value, self.nodeAt(i + 1).value
            else:
                pass
            self.rec_bubble(yes)

    # Task - 4
    def selection_sort_rec(self, a=0, b=1):
        if a >= self.size():
            return
        h_l = a
        if b >= self.size():
            pass
        else:
            if self.nodeAt(h_l).value <= self.nodeAt(b).value:
                pass
            else:
                h_l = b
            self.selection_sort_rec(a, b + 1)
        if h_l == a:
            pass
        else:
            self.nodeAt(a).value, self.nodeAt(b).value = self.nodeAt(b).value, self.nodeAt(a).value
        self.selection_sort_rec(a + 1, b + 1)


# Task - 3
my_input = [6, 9, 5, 1, 3]
my_list = Linked_List(my_input)
my_list.rec_bubble()
my_list.print_list_cmd()
# Task - 4
my_input = [2, 8, 3, 4, 5]
my_list = Linked_List(my_input)
my_list.selection_sort_rec()
my_list.print_list_cmd()


# Task - 5
class Node:
    def __init__(self, val):
        self.data = val
        self.next = None
        self.prev = None


class Doubly_Linked_List:
    def __init__(self, val=None):
        self.head = None
        for i in val:
            new_Node = Node(i)
            if self.head is None:
                self.head = self.tail = new_Node
                self.head.prev = None
                self.tail.next = None
            else:
                self.tail.next = new_Node
                new_Node.prev = self.tail
                self.tail = new_Node
                self.tail.next = None

    def print_list_cmd(self):
        string = ""
        if self.head is None:
            print("empty list")
        string += f"Doubly Linked List:\n{self.head.data}"
        start = self.head.next
        while start is not None:
            string += f" -> {start.data}"
            start = start.next
        print(string)

    def sub(self, i, j):
        value = i.data
        i.data = j.data
        j.data = value

    def insertion_sort_doubly(self):
        i = self.head
        j = None
        while i is not None:
            j = i.next
            while j is not None and j.prev is not None and j.data < j.prev.data:
                self.sub(j, j.prev)
                j = j.prev
            i = i.next


my_input = [10, 5, 8, 1, 9]
my_list = Doubly_Linked_List(my_input)
my_list.print_list_cmd()
my_list.insertion_sort_doubly()
my_list.print_list_cmd()


# Task - 6
def binary_search(my_list, a, b, i):
    if b < a:
        return -1

    else:
        n = (b + a) // 2

        if my_list[n] == i:
            return n

        elif my_list[n] > i:
            return binary_search(my_list, a, n - 1, i)

        else:
            return binary_search(my_list, n + 1, b, i)


my_given_input = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
taking_input = int(input("Enter the number: "))

required_output = binary_search(my_given_input, 0, len(my_given_input) - 1, taking_input)

if required_output == -1:
    print("Not available")
else:
    print("Index:", str(required_output))

# Task - 7
my_dict = {}
def fibonacci_rec(n):
    i = None
    if n not in my_dict:
        if n == 1:
            i = 1
        elif n == 2:
            i = 1
        elif n > 2:
            i = fibonacci_rec(n - 1) + fibonacci_rec(n - 2)
        my_dict[n] = i
        return i
    return my_dict[n]


taking_input = int(input("N : "))
print(fibonacci_rec(taking_input))
