# -*- coding: utf-8 -*-
"""task 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nVdXloFYSYOImelGicYm8pXg8fzKCbCj
"""

import math

input_file = open("input1.txt", "r")
input_read = input_file.read().split("\n")
input_read = input_read[1:]
output_file = open("output1.txt", "w")


def Graph(array):
    my_dict = {}
    vtx = []
    for i in array:
        n, m, w = [int(j) for j in i.split()]
        if n in vtx:
            pass
        else:
            vtx += [n]
        if m in vtx:
            pass
        else:
            vtx += [m]
        if n in my_dict:
            my_dict[n].update({m: w})
        else:
            my_dict[n] = {m: w}
    for j in vtx:
        if j in my_dict: continue
        my_dict[j] = {}
    return (my_dict)


def dijkstra(my_list, s, node):
    if len(my_list) == 0:
        output_file = open("output1.txt", "a")
        output_file.write("0\n")
        return
    else:
        my_dict = Graph(my_list)
    dist = {key: math.inf for key, value in my_dict.items()}
    dist[s] = 0
    my_queue = list(my_dict.keys())
    while len(my_queue) != 0:
        min_l = min(my_queue)
        for key in my_queue:
            if dist[min_l] > dist[key]: min_l = key
        min_idx = my_queue.index(min_l)
        my_queue.pop(min_idx)
        for n, w in my_dict[min_l].items():
            if dist[min_l] + w < dist[n]: dist[n] = dist[min_l] + w
    output_file = open("output1.txt", "a")
    output_file.write(str(dist[node]) + "\n")


i = 0
while input_read[i] != "":
    if len(input_read[i].split()) == 2:
        node, edge = [int(i) for i in input_read[i].split()]
        dijkstra(input_read[i + 1:i + 1 + edge], 1, node)
        i = i + edge + 1
    else:
        i += 1