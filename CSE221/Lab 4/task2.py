# -*- coding: utf-8 -*-
"""task2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10g9B9PGr-cRhlDHfcTvFMq1qMJjXVFS2
"""

import math

input_file = open("input1.txt", "r")
input_read = input_file.read().split("\n")
input_read = input_read[1:]


def Graph(array):
    my_dict = {}
    vtx = []
    for i in array:
        n, m, w = [int(j) for j in i.split()]
        if n in vtx:
            pass
        else:
            vtx += [n]
        if m in vtx:
            pass
        else:
            vtx += [m]
        if n in my_dict:
            my_dict[n].update({m: w})
        else:
            my_dict[n] = {m: w}
    for j in vtx:
        if j in my_dict:
            continue
        my_dict[j] = {}
    return (my_dict)


def dijkstra(my_list, s, node):
    if len(my_list) == 0:
        output_file = open("output2.txt", "w")
        output_file.write(str(s) + "\n")
        return
    else:
        my_dict = Graph(my_list)
    dist = {key: math.inf for key, value in my_dict.items()}
    edge = {key: [s] for key, value in my_dict.items()}
    dist[s] = 0
    queue = list(my_dict.keys())
    while 0 != len(queue):
        minimum = min(queue)
        for key in queue:
            if dist[minimum] <= dist[key]: continue
            minimum = key
        ind = queue.index(minimum)
        queue.pop(ind)
        for n, w in my_dict[minimum].items():
            if w >= dist[n]:
                continue
            edge[n] = [minimum]  
            dist[n] = dist[minimum] + w
    
    last = node
    output = str(node)
    while [1] != edge[node]:
        output = str(edge[node][0]) + " " + output
        node = edge[node][0]
    output = str(s) + " " + output
    output_file = open("output2.txt", "a")
    output_file.write(output + "\n")


i = 0
while input_read[i] != "":
    if len(input_read[i].split()) == 2:
        node, edge = [int(i) for i in input_read[i].split()]
        dijkstra(input_read[i + 1:i + 1 + edge], 1, node)
        i = i + edge + 1
    else:
        i += 1