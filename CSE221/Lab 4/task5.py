# -*- coding: utf-8 -*-
"""task5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1drPEWR2l-3L_CzvW6qCQaBgOU9-V0V9A
"""

import math

input_file = open("input5.txt", "r")
input_read = input_file.read().split("\n")
input_read = input_read[1:]
input_file = open("output5.txt", "w")


def Graph(array):
    my_dict = {}
    vtx = []
    for i in array:
        n, m, w = [int(j) for j in i.split()]
        if n in vtx:
            pass
        else:
            vtx += [n]
        if m in vtx:
            pass
        else:
            vtx += [m]
        if n in my_dict:
            my_dict[n].update({m: w})
        else:
            my_dict[n] = {m: w}
    for j in vtx:
        if j in my_dict:
            continue
        my_dict[j] = {}
    return (my_dict)


def dijkstra(my_list, s, node, start):
    if len(my_list) == 0:
        output_file = open("output5.txt", "a")
        output_file.write("0\n")
        return
    else:
        my_dict = Graph(my_list)
    dist = {key: math.inf for key, value in my_dict.items()}
    edge = {key: math.inf for key, value in my_dict.items()}
    dist[s] = 0
    my_queue = list(my_dict.keys())
    while len(my_queue) != 0:
        min_l = min(my_queue)
        for key in my_queue:
            if dist[min_l] > dist[key]: min_l = key
        min_idx = my_queue.index(min_l)
        my_queue.pop(min_idx)
        for n, w in my_dict[min_l].items():
            if math.inf == dist[n]:
                if w >= dist[n]:
                    continue
                dist[n] = dist[min_l] + w
                if w >= edge[n]:
                    continue
                edge[n] = w
            else:
                if w <= dist[n]:
                    continue
                dist[n] = dist[min_l] + w
                edge[n] = w

    for key, value in edge.items():
        if key == s:
            edge[key] = 0
        else:
            for k, v in my_dict.items():
                if k == 1:
                    continue
                if key not in my_dict[k] or edge[k] >= edge[key]:
                    continue
                edge[key] = edge[k]
    output_file = open("output5.txt", "a")
    output = ""
    for k in range(1, len(edge) + 1):
        if start != 1:
            if k in my_dict[start]:
                continue
            output = str(edge[k] * (-1)) + " " + output
        else:
            output += str(edge[k]) + " "
    output_file.write(output + "\n")


i = 0
try:
    while input_read[i] != "":
        if len(input_read[i].split()) == 2:
            node, edge = [int(i) for i in input_read[i].split()]
            dijkstra(input_read[i + 1:i + 1 + edge], 1, node, int(input_read[i + 1 + edge]))
            i = i + 1 + edge
        else:
            i += 1
except:
    print("")